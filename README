sPickle.py IS NOT OUR CODE - IT IS FROM http://code.google.com/p/streaming-pickle/

Notes:
------

Using the implementation here: http://lear.inrialpes.fr/people/triggs/pubs/Dalal-cvpr05.pdf seems most sensible.
They go over the best parameters and implementation details to use extensivley.

1.  RGB colour representation is used
      - *Authough using colour only improves performance by 1.5% so maybe we could just use greyscale.*

2.  They calculate the gradient of the image.
      - *They find the best gradient detector to use is a simple centred [-1, 0, 1] mask*
      - "For colour images, we calculate separate gradients for each colour channel, and take the one with the largest
      norm as the pixel's gradient vector."

3.  Each pixel contributes a vote to a bin in a histogram associated with the orientation of the gradient centered
    at that cell. The votes are accumulated over spatial regions called 'cells', i.e. each cell has its own histogram.
      - The bins could be from 0 - 360 degrees (signed) or 0 - 180 degrees (unsigned). *In practice unsigned was found
      to work the best for humans but for things like motorbikes signed was found to work best.*
      - The vote is a function of the gradient magnitude in the cell, it could be just the plain magnitude, it's 
        square root, or something more complex. *In practice just using the plain magintude was best (win!).*
      - It is important to have enough bins for orientation. *9 seems to be the optimal number.*
      - A cell size of 6x6 seems to work best for human detection.

4.  Some sort of fancy normalisation thing goes on.
      - *Apparently 3x3 block size works best for human detection.*
      - Apparently it is good to downweight pixels near the edges of blocks by applying a gaussian spatial window to
        each pixel (over the block?) before voting. A sigma of 0.5 x block width is used. - We won't do this at first
      - They also found using vertical and horisontal blocks as well as square ones can increase accuracy.
      - They also try circular blocks - I think we should not worry about this.
      - The normalisation schemes/equations used can be seen in the paper.
